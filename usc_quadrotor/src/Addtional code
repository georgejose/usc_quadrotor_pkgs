void subscriber_callback(const std_msgs::String::ConstPtr& msg){	
		double pi=3.14159265;
		double sum_dx = 0;
		double sum_dy = 0;
		double sum_dz = 0;
		bool colliding_msg_recieved = false;
	 	// ROS_INFO("I heard: [%s]", msg->data.c_str());
		//Message Format is: Source_QR, Target_QR, Euclidean Distance, Distance X axis, Distance Y axis.Then repeat.
		
		//EDIT START HERE
		std::vector<std::string> array;
		std::stringstream ssin1(msg->data.c_str());
		while (ssin1.good()){
			std::string word;
			ssin1 >> word;
			array.push_back(word);	
		}//UNTIL HERE (AND MORE BELOW)
		
		std::stringstream ssin(msg->data.c_str());
    		while (ssin.good()){
			int i = 0;
			std::string arr[6];
			while(i<6){			
				ssin >> arr[i];
				++i;
			}//end while loop
			if(int_marker.name.compare(arr[0]) == 0){
				std::string Qc = arr[1];

				//ALSO ADDED CODE HERE
				for(int i=0; i<array.size(); i++){
					if(array[i/6+1].compare(int_marker.name) == 0 && array[i/6].compare(Qc) == 0){} else{}
					//both detect else, only me detect.		
				}//end for loop
				//THAT IS ALL.


				if(Qc.compare(colliding_with) != 0){
				// if(colliding_with.compare("")==0){
					colliding_with = Qc;
					ROS_ERROR("I heard: [%s]", msg->data.c_str());
					ROS_ERROR("I am [%s] colliding with [%s]",int_marker.name.c_str(),Qc.c_str());

					//colliding = true;
					colliding_msg_recieved = true;
					double distance = StringToNumber<double>(arr[2]);
					double dx = StringToNumber<double>(arr[3]);
					double dy = StringToNumber<double>(arr[4]);
					double dz = StringToNumber<double>(arr[5]);
					if(distance <= MIN_DISTANCE || 
					(dy>=-MIN_DISTANCE && dy <= MIN_DISTANCE && 
					dx>=0 && dx <= MIN_DISTANCE+AVOID_SET_LENGHT &&
					dz>=-MIN_DISTANCE && dz <= MIN_DISTANCE)){
						sum_dx += dx;
						sum_dy += dy;
						sum_dz += dz;				
					}//end if
				}//end if		
			}//end if			
    		}//end while loop
		if(colliding_msg_recieved){

			change_yaw = atan2(sum_dx,sum_dy);
			change_pitch = -atan2(sum_dx,sum_dz);
			ROS_ERROR("I will change_yaw [%f], change_pitch [%f]",change_yaw,change_pitch);
			colliding = true;
			colliding_msg_recieved = false;
		}	
	}//end subscriber function
